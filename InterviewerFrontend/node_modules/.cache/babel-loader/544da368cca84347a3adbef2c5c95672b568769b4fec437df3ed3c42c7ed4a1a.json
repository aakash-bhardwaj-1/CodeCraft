{"ast":null,"code":"import axios from \"axios\";\nimport ApiManager from \"./ApiManager\";\nimport { BASE_URL } from \"../config\";\nexport const GetJobOpenings = async () => {\n  try {\n    const interviewer_id = await localStorage.getItem(\"interviewer_id\");\n    if (!interviewer_id) {\n      throw new Error(\"Interviewer ID not found in localStorage\");\n    }\n    const result = await ApiManager(`/interviewer/jobs/${interviewer_id}`, {\n      method: \"GET\"\n    });\n    console.log(result.data);\n    return result.data;\n  } catch (error) {\n    console.error('Error fetching job openings:', error);\n    throw error;\n  }\n};\n_c = GetJobOpenings;\nexport const GetJobClosedOpenings = async () => {\n  try {\n    const interviewer_id = await localStorage.getItem(\"interviewer_id\");\n    if (!interviewer_id) {\n      throw new Error(\"Interviewer ID not found in localStorage\");\n    }\n    const closedResult = await ApiManager(`/interviewer/closed-jobs/${interviewer_id}`, {\n      method: \"GET\"\n    });\n    console.log(\"inside api call\" + closedResult.data);\n    return closedResult.data;\n  } catch (error) {\n    console.error('Error fetching closed job openings:', error);\n    throw error;\n  }\n};\n_c2 = GetJobClosedOpenings;\nexport const SendJob = async jobData => {\n  try {\n    console.log(jobData);\n    const response = await axios.post(`${BASE_URL}/interviewer/createJob`, jobData);\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error sending job data:', error);\n    throw error;\n  }\n};\n_c3 = SendJob;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"GetJobOpenings\");\n$RefreshReg$(_c2, \"GetJobClosedOpenings\");\n$RefreshReg$(_c3, \"SendJob\");","map":{"version":3,"names":["axios","ApiManager","BASE_URL","GetJobOpenings","interviewer_id","localStorage","getItem","Error","result","method","console","log","data","error","_c","GetJobClosedOpenings","closedResult","_c2","SendJob","jobData","response","post","_c3","$RefreshReg$"],"sources":["/home/aakash/MySPE/CodeCraft/InterviewerFrontend/src/API/APIs.js"],"sourcesContent":["import axios from \"axios\";\nimport ApiManager from \"./ApiManager\";\nimport { BASE_URL } from \"../config\";\n\nexport const GetJobOpenings = async () => {\n    try {\n        const interviewer_id = await localStorage.getItem(\"interviewer_id\");\n        if (!interviewer_id) {\n            throw new Error(\"Interviewer ID not found in localStorage\");\n        }\n        const result = await ApiManager(`/interviewer/jobs/${interviewer_id}`, {\n            method: \"GET\",\n        });\n        console.log(result.data);\n        return result.data;\n    } catch (error) {\n        console.error('Error fetching job openings:', error);\n        throw error;\n    }\n};\n\nexport const GetJobClosedOpenings = async () => {\n    try {\n        const interviewer_id = await localStorage.getItem(\"interviewer_id\");\n        if (!interviewer_id) {\n            throw new Error(\"Interviewer ID not found in localStorage\");\n        }\n        const closedResult = await ApiManager(`/interviewer/closed-jobs/${interviewer_id}`, {\n            method: \"GET\",\n        });\n        console.log(\"inside api call\"+closedResult.data);\n        return closedResult.data;\n    } catch (error) {\n        console.error('Error fetching closed job openings:', error);\n        throw error;\n    }\n};\n\nexport const SendJob = async (jobData) => {\n    try {\n        console.log(jobData);\n        const response = await axios.post(`${BASE_URL}/interviewer/createJob`, jobData);\n        console.log(response.data);\n        return response.data;\n    } catch (error) {\n        console.error('Error sending job data:', error);\n        throw error;\n    }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,QAAQ,QAAQ,WAAW;AAEpC,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACA,MAAMC,cAAc,GAAG,MAAMC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;IACnE,IAAI,CAACF,cAAc,EAAE;MACjB,MAAM,IAAIG,KAAK,CAAC,0CAA0C,CAAC;IAC/D;IACA,MAAMC,MAAM,GAAG,MAAMP,UAAU,CAAE,qBAAoBG,cAAe,EAAC,EAAE;MACnEK,MAAM,EAAE;IACZ,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAACH,MAAM,CAACI,IAAI,CAAC;IACxB,OAAOJ,MAAM,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACf;AACJ,CAAC;AAACC,EAAA,GAfWX,cAAc;AAiB3B,OAAO,MAAMY,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACA,MAAMX,cAAc,GAAG,MAAMC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;IACnE,IAAI,CAACF,cAAc,EAAE;MACjB,MAAM,IAAIG,KAAK,CAAC,0CAA0C,CAAC;IAC/D;IACA,MAAMS,YAAY,GAAG,MAAMf,UAAU,CAAE,4BAA2BG,cAAe,EAAC,EAAE;MAChFK,MAAM,EAAE;IACZ,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAACK,YAAY,CAACJ,IAAI,CAAC;IAChD,OAAOI,YAAY,CAACJ,IAAI;EAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZH,OAAO,CAACG,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,MAAMA,KAAK;EACf;AACJ,CAAC;AAACI,GAAA,GAfWF,oBAAoB;AAiBjC,OAAO,MAAMG,OAAO,GAAG,MAAOC,OAAO,IAAK;EACtC,IAAI;IACAT,OAAO,CAACC,GAAG,CAACQ,OAAO,CAAC;IACpB,MAAMC,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,IAAI,CAAE,GAAEnB,QAAS,wBAAuB,EAAEiB,OAAO,CAAC;IAC/ET,OAAO,CAACC,GAAG,CAACS,QAAQ,CAACR,IAAI,CAAC;IAC1B,OAAOQ,QAAQ,CAACR,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACf;AACJ,CAAC;AAACS,GAAA,GAVWJ,OAAO;AAAA,IAAAJ,EAAA,EAAAG,GAAA,EAAAK,GAAA;AAAAC,YAAA,CAAAT,EAAA;AAAAS,YAAA,CAAAN,GAAA;AAAAM,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}